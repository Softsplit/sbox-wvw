@using Sandbox.UI;

<root style=@($"flex-direction: column; font-size: {FontSize}px; width: 100%; height: 100%; overflow-y: scroll; background-color: #0008; color: #fff")>
    @if(DirectoryAdd != "")
    {
        <div style="flex-direction: row; padding: auto;" onclick=@(() => DirectoryAdd = GetPreviousDirectory(DirectoryAdd))>
            <img style=@($"height:{FontSize}px; aspect-ratio: 1; ") src="ui/back.svg" />
            <div>@GetDirectoryName(DirectoryAdd)</div>
        </div>
    }
    
    @foreach (string s in DirectoryFolders(DirectoryAdd!=""? $"{Directory}{DirectoryAdd}" : $"{Directory}"))
    {
        <div style=@($" flex-direction: row; padding: {FontSize/3}px;") onrightclick=@(() => OpenPopup(true, false, s)) onclick=@(() => SelectDirectory(s))>
            <img style=@($"height:{FontSize}px; aspect-ratio: 1; ") src="ui/folder.svg">
            <div>@s</div>
        </div>
    }
    @if (CreatingFolder)
    {
        <div style=@($"background-color: #464646ab; flex-direction: row; padding: {FontSize/3}px;")>
            <img style=@($"height:{FontSize}px; aspect-ratio: 1; ") src="ui/folder.svg">
            <TextEntry Value:bind="@FolderName" onsubmit="@CreateFolder" style="justify-content: flex-start;"/>
        </div>
    }

	@foreach (string s in DirectoryItems(DirectoryAdd!=""? $"{Directory}{DirectoryAdd}" : $"{Directory}"))
    {
        <div style=@($" flex-direction: row; padding: {FontSize/3} px;")>
            @if(Value == (DirectoryAdd!="" ? $"{Directory}{DirectoryAdd}/{s}" : $"{Directory}{DirectoryAdd}/{s}"))
            {
                <div>‎ • ‎ </div>
            }
            <div onrightclick=@(() => OpenPopup(true, true, s)) onclick=@(() => SelectFile(s))>@s</div>
        </div>
    }
    @if (CreatingFile)
    {
        <div style=@($"flex-direction: row; padding: {FontSize/2}px; background-color: #464646ab;")>
            <TextEntry Value:bind="@FileName" onsubmit="@CreateFile" style="justify-content: flex-start;"/>
        </div>
    }
    
    <div style="height: 100%;" onrightclick=@(() => OpenPopup()) onclick="@ClosePopups"></div>
    @if(Popup)
    {
        <div style="top: @(cursorPos.y)%; left: @(cursorPos.x)%; background-color: rgba( #222 ); position: absolute; flex-direction: column;">
            @if(FileSelected)
            {
                <div onclick=@Delete style="flex-direction: row;">
                    <img style=@($"height:{FontSize}px; aspect-ratio: 1; ") src="ui/delete.svg">
                    <div>@($"Delete {(DeleteFile ? "File" : "Folder")}")</div>
                </div>
            }
            <div onclick=@StartCreateFolder style="flex-direction: row;">
                <img style=@($"height:{FontSize}px; aspect-ratio: 1; ") src="ui/folder.svg">
                <div>Create Folder</div>
            </div>
            <div onclick=@StartCreateFile style="flex-direction: row;">
                <img style=@($"height:{FontSize}px; aspect-ratio: 1; ") src="ui/save.svg">
                <div>@CreateFilePrompt</div>
            </div>
        </div>
    }
    
</root>

@code
{
	public string Directory { get; set; }
	public string FileContents { get; set; }
	public string CreateFilePrompt { get; set; } = "Save Spell";
	public string FileExtension { get; set; } = "json";
	public float FontSize { get; set; } = 15f;
	public string DirectoryAdd = "";

   
    public bool Popup;
    public bool CreatingFolder;
    public bool CreatingFile;
    public string FolderName;
    public string FileName;

    public bool FileSelected;
    public bool DeleteFile;
    public string ThingToDelete;

    public Vector2 cursorPos;

    string _value;

	public string Value
    {
        get => _value;
        set
        {
            if (_value == value)
                return;

            _value = value;
        }
    }

    public void Delete()
    {
        if(DeleteFile)
        {
            FileSystem.Data.DeleteFile(DirectoryAdd!="" ? $"{Directory}{DirectoryAdd}/{ThingToDelete}" : $"{Directory}{DirectoryAdd}/{ThingToDelete}");
        }
        else
        {
            FileSystem.Data.DeleteDirectory($"{Directory}{DirectoryAdd}/{ThingToDelete}", true);
        }
        ClosePopups();
    }

    public void StartCreateFolder()
    {
        ClosePopups();
        CreatingFolder = true;
    }
    public void StartCreateFile()
    {
        ClosePopups();
        CreatingFile = true;
    }
    public void CreateFolder()
    {
        CreatingFolder = false;
        string newFolderName = FolderName;
        int counter = 1;
        
        while (FileSystem.Data.DirectoryExists($"{Directory}{DirectoryAdd}/{newFolderName}"))
        {
            newFolderName = $"{FolderName}({counter})";
            counter++;
        }
        
        FileSystem.Data.CreateDirectory($"{Directory}{DirectoryAdd}/{newFolderName}");
    }

    public void CreateFile()
    {
        CreatingFile = false;
        string newFileName = FileName;
        int counter = 1;
        
        while (FileSystem.Data.FileExists($"{Directory}{DirectoryAdd}/{newFileName}.{FileExtension}"))
        {
            newFileName = $"{FileName}({counter})";
            counter++;
        }
        
        FileSystem.Data.WriteAllText($"{Directory}{DirectoryAdd}/{newFileName}.{FileExtension}", FileContents);
    }

    public void ClosePopups()
    {
        Popup = false;
    }

    public void SelectDirectory(string directory)
    {
        DirectoryAdd = $"{DirectoryAdd}/{directory}";
        ClosePopups();
    }

    public void SelectFile(string file)
    {
        Value = (DirectoryAdd!="" ? $"{Directory}{DirectoryAdd}/{file}" : $"{Directory}{DirectoryAdd}/{file}");
        ClosePopups();
    }
    public void OpenPopup(bool fileSelected = false, bool isFile = false, string thingToDelete = "")
    {
        Log.Info("sex");
        cursorPos = (Mouse.Position / Screen.Size) * 100.0f;
        ThingToDelete = thingToDelete;
        DeleteFile = isFile;
        FileSelected = fileSelected;
        Popup = true;
    }

    public static string GetPreviousDirectory(string directory)
    {
        if(directory.Count(f => f == '/') < 2) return "";
        int lastIndex = directory.LastIndexOf('/');

        return directory.Substring(0, lastIndex);
    }

    public static string GetDirectoryName(string directory)
    {
        int lastIndex = directory.LastIndexOf('/');
        return directory.Substring(lastIndex+1, directory.Count()-1);
    }

    public List<string> DirectoryItems(string directory)
    {
        if(!FileSystem.Data.DirectoryExists(directory))
        {
            FileSystem.Data.CreateDirectory(directory);
        }

        List<string> returned = FileSystem.Data.FindFile(directory).ToList();

        returned.Sort();

        return returned;
    }

    public List<string> DirectoryFolders(string directory)
    {
        if(!FileSystem.Data.DirectoryExists(directory))
        {
            FileSystem.Data.CreateDirectory(directory);
        }
        
        List<string> returned = FileSystem.Data.FindDirectory(directory).ToList();

        returned.Sort();

        return returned;
    }

	protected override int BuildHash() => System.HashCode.Combine( Directory, Value, Popup, CreatingFolder, FileContents );


}